#!/usr/bin/env python -OO
# -*- coding: iso-8859-1 -*-
"""
    LocalWiki - Standalone HTTP server

    @copyright: 2006 Philip Neustrom
    @license: GNU GPL, see COPYING for details.
"""

import sys, time, mimetypes, os
sys.path.extend(['/Library/Webserver/sycamore','/Library/Webserver/sycamore/share'])

from LocalWiki.support.wsgi_server import httpserver
#from LocalWiki.support.wsgi_server import swap 
from LocalWiki.request import RequestWSGI
from LocalWiki import config
import profile, time

def handle_request(env, start_response):
  static_files_path = '%s/wiki' % config.web_dir
  if env.get('QUERY_STRING', '') == 'profile':
    profile.runctx('RequestWSGI(env,start_response).run()', globals(), locals(), 'prof.%s' % time.time())
    return ['profile ran']

  # because this is standalone we need to deal with the case of serving static files..  
  elif env['PATH_INFO'].startswith(static_files_path) or env['PATH_INFO'] == ('%s/favicon.ico' % config.web_dir):
    file_path = config.web_root + env['PATH_INFO']
    static_file = open(file_path, 'r')
    mimetype = mimetypes.guess_type(file_path)[0]
    modified_time_unix = os.path.getmtime(file_path)
    datestring = time.strftime('%a, %d %b %Y %H:%M:%S', time.gmtime(modified_time_unix)) + ' GMT'
    start_response('200 OK', [("Content-Type", mimetype), ("Last-Modified", datestring)])
    return static_file
    
  else:
    request = RequestWSGI(env, start_response)
    return request.run()
    
if __name__ == '__main__':
  #WSGIServer(handle_request, '/tmp/fcgi.sock').run()
  #swap.serve_application(handle_request, '/index.scgi', 8882)
  httpserver.serve(handle_request, host=config.httpd_host, port=config.httpd_port)
