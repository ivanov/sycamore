This is a rough overview of the DavisWiki (and RocWiki) system for developers who would like to start making changes.

The code is based on MoinMoin. (start looking there)  It's mostly written in python with an exception being the helper apps that do the search.

MoinMoin editors help is here http://moinmoin.wikiwikiweb.de/HelpOnAdministration.  Our software is heavily modified, and it's a fork from about a year ago (version 1.2.3, to be specific).  We've decided (though not entirely) to refer to it as "LocalWiki" simply for the purposes of not refering to it as MoinMoin (because it's getting further from MoinMoin as time goes on).  Many of the pieces of our code will work with Moin with slight modification, and projects such as [http://druidwiki.org DruidWiki] have done so.

You should first become familar with the working interface of an actual install of the software.

The subversion repository is organized with three directories:

 * installhtml  -- where the html files, cgi/modpython, data, and local configuration is
 * util_apps -- these are auxilary applications and helper scripts (such as the ones that do the search), as well as some XML files that the wiki uses for things like the "Events Board" and User Statistics.  Soon these XML files will be removed and it will be less file-dependent, working instead off of a ["DB Design" database].
 * LocalWiki -- this is the real treat, and likely what you'll modify.  This is a standard python module directory!

== How's it work? ==
The first thing that's called when you load up a wiki page is request.py, which loads up a request object.  Request then sends a Page object (page.py).  There are a couple options for what happens when a Page object is loaded.  The first is when it's loaded inside of some code, by calling {{{Page('pagename')}}}.  This is a lean operation.  The second is the more usual case of a user loading up a page through a browser.  The page itself likely has a bunch of text in it.

When the page is loaded by a user the page asks, "Have I loaded myself, in this state, before?"  If the answer is "no," then that means the page needs to parse its markup and write this parsed markup to the page's cache (see caching.py).  If the answer is "yes, totally!" then that means the page reads the page cache and writes the output to the request object ({{{request.write()}}}.

== Macros and actions ==
Sometimes the answer to "Have I loaded myself?" is "Yes, kinda."  This is the case when __certain__ ''macros'' are included in a page.  A macro is a {{{[[ThingLikeThis]]}}} that does some special fancy stuff when placed inside a page.  Many macros have ''no dependents.'' This means that they ''load the same way every time the page is viewed''.  An example of a no-dependent macro is the {{{[[Thumbnail]]}}} macro.  Images load the same way every time a page is loaded.  An example of a ''dependent'' macro would be the {{{[[RandomQuote]]}}} macro, which loads, well, something random each time!  As you can imagine, we cache the macro's state (in the page's cache) if the macro is not dependent on anything, and we don't cache it if it is dependent.

Many macros can be found internally inside of wikimacro.py as well as within the macro/ directory.  Adding a file to the macro/ directory creates that macro, given that it properly imports the libraries (just copy!)

Actions are sort of the dual of macros, and there's a similar wikiaction.py and action/ directory.  However, actions cannot be included inside of pages the way macros can.  Actions exist as url queries.  For instance, clicking the "Info" button on this page is nothing more than going to {{{http://dev.daviswiki.org/index.cgi/Developer_Overview?action=info}}}.  I hope that explaination sufficies for now.

Actions and macros can work together and often do.  For the "Events Board" we have an {{{[[Events]]}}} macro as well as an {{{events}}} action.  The macro displays the events and the action is used when altering the events.  The convention, code-wise, is lowercase filenames for actions and Uppercase for macros.
